<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Validation</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.GetValueHandler">
            <summary>
            Delegate to a method that returns a value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation">
            <summary>
            Validates members of an object.
            </summary>
            <remarks>
            Author: Daniel Cazzulino, daniel@cazzulino.com
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.Validate``1(``0,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Validates that the incoming <paramref name="value"/> is valid according to the 
            validation criteria specified for the <paramref name="property"/> on type <typeparamref name="T"/> 
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> that contains the <paramref name="memberName"/> 
            member to validate for the given <paramref name="value"/>.</param>
            <param name="property">Property containing the validation criteria.</param>
            <param name="value">Value to validate for the given property.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.Validate``1(``0,System.Reflection.PropertyInfo,System.Object,System.String)">
            <summary>
            Validates that the incoming <paramref name="value"/> is valid according to the 
            validation criteria specified for the <paramref name="property"/> on type <typeparamref name="T"/> 
            through attributes on type <typeparamref name="T"/> and its ancestors for the given ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> that contains the <paramref name="memberName"/> 
            member to validate for the given <paramref name="value"/>.</param>
            <param name="property">Property containing the validation criteria.</param>
            <param name="value">Value to validate for the given property.</param>
            <param name="ruleset">The rule set to validate.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.GetValidator(System.Type,System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.GetValueHandler)">
            <summary>
            Gets a validator for the <paramref name="property"/> of the given 
            <paramref name="owner"/> type, for the default ruleset. 
            </summary>
            <param name="owner">Type that owns the <paramref name="property"/>.</param>
            <param name="property">The property that contains the validation criteria attributes.</param>
            <param name="valueGetter">Handler to retrieve the incoming value to validate against the property validation criteria, 
            for a given target object of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.GetValidator``1(System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.GetValueHandler)">
            <summary>
            Gets a validator for the <paramref name="property"/> of the given 
            <typeparamref name="T"/> type, for the incoming <paramref name="value"/> and 
            default ruleset.
            </summary>
            <typeparam name="T">Type that owns the <paramref name="property"/>.</typeparam>
            <param name="property">The property that contains the validation criteria attributes.</param>
            <param name="valueGetter">Handler to retrieve the incoming value to validate against the property validation criteria, 
            for a given target object of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.GetValidator``1(System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.GetValueHandler,System.String)">
            <summary>
            Gets a validator for the <paramref name="property"/> of the given 
            <typeparamref name="T"/> type, for the incoming <paramref name="value"/> and 
            the <paramref name="ruleset"/> specified.
            </summary>
            <typeparam name="T">Type that owns the <paramref name="property"/>.</typeparam>
            <param name="property">The property that contains the validation criteria attributes.</param>
            <param name="valueGetter">Handler to retrieve the incoming value to validate against the property validation criteria, 
            for a given target object of type <typeparamref name="T"/>.</param>
            <param name="ruleset">The rule set to get the validator for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidation.GetValidator(System.Type,System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.GetValueHandler,System.String)">
            <summary>
            Gets a validator for the <paramref name="property"/> of the given 
            <paramref name="owner"/> type, for the given the <paramref name="ruleset"/>.
            </summary>
            <param name="owner">Type that owns the <paramref name="property"/>.</param>
            <param name="property">The property that contains the validation criteria attributes.</param>
            <param name="valueGetter">Handler to retrieve the incoming value to validate against the property validation criteria, 
            for a given target object of type <typeparamref name="T"/>.</param>
            <param name="ruleset">The rule set to get the validator for.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder">
            <summary>
            Creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> objects for member descriptors.
            </summary>
            <remarks>
            Subclasses might return <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> implementations that do not assume
            a value is being extracted from the type that owns the member descriptors.<para/>
            This is necessary in the integration scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetFieldValueAccess(System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="fieldInfo"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/></param> representing the field for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="fieldInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetFieldValueAccess(System.Reflection.FieldInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="fieldInfo"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/></param> representing the field for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="fieldInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetMethodValueAccess(System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the return value for <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/></param> representing the method for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="methodInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> represents a method with a non-void return type.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> represents a method with parameters.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetMethodValueAccess(System.Reflection.MethodInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/></param> representing the method for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetPropertyValueAccess(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value for <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/></param> representing the property for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="propertyInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="propertyInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetPropertyValueAccess(System.Reflection.PropertyInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/></param> representing the property for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess">
            <summary>
            Represents the logic of how to access values from a source object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess.GetValue(System.Object,System.Object@,System.String@)">
            <summary>
            Retrieves a value from <paramref name="source"/>.
            </summary>
            <param name="source">The source for the value.</param>
            <param name="value">The value retrieved from the <paramref name="source"/>.</param>
            <param name="valueAccessFailureMessage">A message describing the failure to access the value, if any.</param>
            <returns><see langword="true"/> when the retrieval was successful; <see langword="false"/> otherwise.</returns>
            <remarks>Subclasses provide concrete value accessing behaviors.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess.Key">
            <summary>
            Gets a hint of the location of the value relative to the object where it was retrieved from.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException">
            <summary>
            Exception optionally thrown when validation fails.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Initializes the exception with the given results, which 
            must have a false <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.IsValid"/> value.
            </summary>
            <param name="results">The results of a validation.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="results"/> does not 
            have a false <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.IsValid"/> value.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the exception from serialization information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException.ValidationResults">
            <summary>
            Gets the results that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ParameterValidatorFactory">
            <summary>
            A special factory class that creates Validator objects based on
            attributes specified on a method parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ParameterValidatorFactory.CreateValidator(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instance based on the validation
            attributes on the given parameter.
            </summary>
            <remarks>This factory method ignores configuration and rulesets. For parameters,
            only attribute based configuration is supported at this time.</remarks>
            <param name="paramInfo">The <see cref="T:System.Reflection.ParameterInfo"/> for the parameter to construct a validator for.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ResourceStringLoader">
            <summary>
            Helper class to load resources strings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ResourceStringLoader.LoadString(System.String,System.String)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ResourceStringLoader.LoadString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <param name="asm">The assembly to load the resource from.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute">
            <summary>
            Base class for validation related attributes.
            </summary>
            <remarks>
            Holds shared information about validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.GetMessageTemplate">
            <summary>
            Returns the message template for the represented validator.
            </summary>
            <remarks>
            The textual message is given precedence over the resource based mechanism.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.Ruleset">
            <summary>
            Gets or set the ruleset to which the represented validator belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate">
            <summary>
            Gets or sets the message template to use when logging validation results.
            </summary>
            <remarks>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and either 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> or
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> have been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName">
            <summary>
            Gets or sets the name of the resource to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and the 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> has been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType">
            <summary>
            Gets or sets the name of the type to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and the 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> has been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.Tag">
            <summary>
            Gets or sets the tag that will characterize the results logged by the represented validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator">
            <summary>
            Represents the different comparison behaviors available for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.Equal">
            <summary>
            Comparison for equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.NotEqual">
            <summary>
            Comparison for not equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.GreaterThan">
            <summary>
            Comparison for greater.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.GreaterThanEqual">
            <summary>
            Comparison for greater or equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.LessThan">
            <summary>
            Comparison for lesser.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.LessThanEqual">
            <summary>
            Comparison for lesser or equal.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder">
            <summary>
            Helps building validators composed by other validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.GetValidator">
            <summary>
            Returns the validator created by the builder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.DoGetValidator">
            <summary>
            Creates the composite validator built by the builder.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy">
            <summary>
            Represents the behavior necessary to provide integration with the validation block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.PerformCustomValueConversion(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs)">
            <summary>
            Performs a custom conversion of a value to validate.
            </summary>
            <param name="e">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs"/> containing the value to convert.</param>
            <remarks>
            Implementors should set the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ConvertedValue"/> with the conversion result,
            and set the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ConversionErrorMessage"/> should an error occur during conversion.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.GetRawValue">
            <summary>
            Retrieves the raw value to validate, before conversion.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.GetMemberValueAccessBuilder">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use when building a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> in an integration scenario.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.Ruleset">
            <summary>
            Gets the ruleset to use when building validators in an integration scenario.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.ProvidesCustomValueConversion">
            <summary>
            Gets the indication of whether custom value conversion should be performed during validation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.ValidatedPropertyName">
            <summary>
            Gets the name of the property to use when building validators in an integration scenario.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy.ValidatedType">
            <summary>
            Gets the type to use when building validators in an integration scenario.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValidationIntegrationHelper">
            <summary>
            Encapsulates the logic used to link validation for integration scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValidationIntegrationHelper.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValidationIntegrationHelper"/> for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">when <paramref name="integrationProxy"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">when configuration is not complete.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValidationIntegrationHelper.GetValidator">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> represented by the configuration in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.IValidationIntegrationProxy"/>, linked
            with the integration scenario as necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValidationIntegrationHelper.GetValue(System.Object@,System.String@)">
            <summary>
            Returns the value to validate.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs">
            <summary>
            Provides data to perform custom value conversions in validation integration scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.#ctor(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs"/> class.
            </summary>
            <param name="valueToConvert">The raw value to convert.</param>
            <param name="targetType">The type to which the <paramref name="valueToConvert"/> needs to be converted to.</param>
            <param name="valueSource">The object from which the value was extracted.</param>
            <param name="sourcePropertyName">The name of the property </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ValueToConvert">
            <summary>
            Gets the value to convert, as retrieved from the control.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.TargetType">
            <summary>
            Gets the type to which the value should be converted.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ValueSource">
            <summary>
            Gets the object for which the validation requiring the value conversion is being performed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.SourcePropertyName">
            <summary>
            Gets the name of the property that maps to the control that supplied the value to convert.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ConvertedValue">
            <summary>
            Gets or sets the converted value.
            </summary>
            <remarks>
            This property must be set to the desired value; otherwise 
            the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ValueToConvert"/> will be used.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs.ConversionErrorMessage">
            <summary>
            Gets or sets the message describing the conversion failure.
            </summary>
            <remarks>
            The error message should be set to <see langword="null"/> if conversion was successful.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase">
            <summary>
            Encapsulates shared validator building behavior.
            </summary>
            <remarks>
            This class relies on implementations of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType"/> to supply validation descriptors.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatorDescriptor">
            <summary>
            Represents the behavior to create a validator for a target type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element as defined by attributes.
            </summary>
            <remarks>
            This class is a flyweight, so instances should not be kept for later use.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type as defined by attributes.
            </summary>
            <remarks>
            This class is a flyweight, so instances should not be kept for later use.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory">
            <summary>
            Factory for creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> objects for properties.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.ResetCaches">
            <summary>
            Resets the cached validators.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter">
            <summary>
            Specifies the kind of filtering to perform for <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])"/>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter.Include">
            <summary>
            Include results with the supplied tags.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter.Ignore">
            <summary>
            Ignore results with the supplied tags.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType">
            <summary>
            Specifies the kind of composition that is to be used when multiple validation attributes
            are supplied for a member info.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType.And">
            <summary>
            Use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType.Or">
            <summary>
            Use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetPropertyValueAccessValidatorBuilder(System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="propertyInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="propertyInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetFieldValueAccessValidatorBuilder(System.Reflection.FieldInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="fieldInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetMethodValueAccessValidatorBuilder(System.Reflection.MethodInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="methodInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> returns <see langword="void"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> has parameters.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator">
            <summary>
            Aggregates a set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instances, performing validation by allowing each validator to perform its own.
            </summary>
            <remarks>
            Validation fails if any of the composed validators fails.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator">
            <summary>
            Represents logic used to validate an object.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Validate(System.Object)">
            <summary>
            Applies the validation logic represented by the receiver on an object, 
            returning the validation results.
            </summary>
            <param name="target">The object to validate.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> representing the outcome of the validation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Validate(System.Object,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Applies the validation logic represented by the receiver on an object, 
            adding the validation results to <paramref name="validationResults"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            Subclasses must provide a concrete implementation the validation logic.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.LogValidationResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,System.String,System.Object,System.String)">
            <summary>
            Logs a validation result to <paramref name="validationResults"/>.
            </summary>
            <param name="validationResults">The validation results to which the new result should be stored.</param>
            <param name="message">The message that describes the result.</param>
            <param name="target">The object to which the result is related to.</param>
            <param name="key">The key that identifies how the result relates to the target.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.LogValidationResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,System.String,System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            Logs a validation result to <paramref name="validationResults"/>.
            </summary>
            <param name="validationResults">The validation results to which the new result should be stored.</param>
            <param name="message">The message that describes the result.</param>
            <param name="target">The object to which the result is related to.</param>
            <param name="key">The key that identifies how the result relates to the target.</param>
            <param name="nestedValidationResults"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
            <remarks>The default validation maessage formatting provides the object to validate, the key and the tag.<para/>
            Subclasses may provide additional formatting parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.MessageTemplate">
            <summary>
            Gets or sets the message template to use when logging results.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DefaultMessageTemplate"/> will be returned if no message was specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Tag">
            <summary>
            Gets a value characterizing the logged result.
            </summary>
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Tag"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/> class.</para>
            </summary>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver, invoking validation on the composed validators.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            All the composed validators' results will be logged.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            This validator does not log messages of its own.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters">
            <summary>
            Represents the behavior of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters.Any">
            <summary>
            Indicates that validation is considered successful when at least one character in the
            character set is included in the validated value.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters.All">
            <summary>
            Indicates that validation is considered successful when at all the characters in the
            character set are included in the validated value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator">
            <summary>
            Performs validation on strings by verifying if it contains a character set using the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> mode.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1">
            <summary>
            Base class for strongly typed validators on simple values.
            </summary>
            <typeparam name="T">The type of value to validate.</typeparam>
            <remarks>Validating values of types different that <typeparamref name="T"/> results
            in a validation failure.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1">
            <summary>
            Represents logic used to validate an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects the can be validated.</typeparam>
            <remarks>
            Generic validators will still answer the non-generic validation requests, logging a failure when the 
            validation target is not compatible with the <typeparamref name="T"/>.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.Validate(`0)">
            <summary>
            Applies the validation logic represented by the receiver on an instance of <typeparamref name="T"/>, 
            returning the validation results.
            </summary>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> representing the outcome of the validation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.Validate(`0,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Applies the validation logic represented by the receiver on an instance of <typeparamref name="T"/>, 
            adding the validation results to <paramref name="validationResults"/>.
            </summary>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The implementation for this method will perform type checking and converstion before forwarding the 
            validation request to method <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            Subclasses must provide a concrete implementation the validation logic.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.Negated">
            <summary>
            Gets the indication of negated validation logic.
            </summary>
            <value><see langword="true"/> if the default validation logic should be used; othwerise <see langword="false"/>.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultMessageTemplate">
            <summary>
            Gets the default message template for de validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute">
            <summary>
            Describes the validation logic that must be applied to a language element when
            creating a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> for a type.
            </summary>
            <remarks>
            Multiple validator attributes can be specified for a language element. 
            <para/>
            All the rules will be applied as an "And" composition unless the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/> overrides this behavior.
            <para/>
            A ruleset can be specified for the attribute, as well as message overrides 
            (either literal or resource based).
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.IgnoreNullsAttribute"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.Microsoft#Practices#EnterpriseLibrary#Validation#IValidatorDescriptor#CreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType"></param>
            <param name="memberValueAccessBuilder"></param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <remarks>
            Sets the tag and message template to the created validator.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <remarks>
            The default implementation invokes <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)"/>. Subclasses requiring access to all
            the parameters or this method may override it instead of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute"/> </para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.Negated">
            <summary>
            Gets or sets the flag indicating if the validator to create should be negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute"/> </para>
            </summary>
            <param name="characterSet">The character set to be evaluated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute"/> </para>
            </summary>
            <param name="characterSet">The character set to be evaluated.</param>
            <param name="containsCharacters">The mode to evaluate the character set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1">
            <summary>
            Validates the value of a field using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a member is to be performed.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1">
            <summary>
            Base generic validator for member access validation.
            </summary>
            <typeparam name="T">The type for which validation on a member is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1"/> class.</para>
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use when accessing the
            value of the validated member.</param>
            <param name="valueValidator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> to validate the value of the
            validated member.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates extracting a value from <paramref name="objectToValidate"/> and applying a validator
            to it.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1"/> class.</para>
            </summary>
            <param name="fieldName">The name of the field to validate.</param>
            <param name="fieldValueValidator">The validator for the value of the field.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1">
            <summary>
            Validates the return value of a method without parameters using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a method is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1"/> class.</para>
            </summary>
            <param name="methodName">The name of the method to validate.</param>
            <param name="methodValueValidator">The validator for the value of the method.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1">
            <summary>
            Performs validation on objects by applying the 
            validation rules specified for the given type-parameter.
            </summary>
            <remarks>
            Same as <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1"/>, but no need of typeof.
            </remarks>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator">
            <summary>
            Performs validation on objects by applying the validation rules specified for a supplied type.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type.</para>
            </summary>
            <param name="targetType">The target type</param>
            <remarks>
            The default ruleset for <paramref name="targetType"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by applying the validation rules for the target type specified for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            If <paramref name="objectToValidate"/> is <see langword="null"/> validation is ignored.
            <para/>
            A referece to an instance of a type not compatible with the configured target type
            causes a validation failure.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1.#ctor">
            <summary>
            Initializes a new instance <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1.#ctor(System.String)">
            <summary>
            Initializes a new instance <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator`1"/> using the supplied ruleset.
            </summary>
            <param name="targetRuleset">The ruleset to use.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator">
            <summary>
            Performs validation by comparing the a value with the value of a property on the target
            object by using a specified comparison operation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator">
            <summary>
            Performs validation by comparing the provided value with another value extracted from the validation target.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator">
            <summary>
            Base class for validators on simple values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.Negated">
            <summary>
            Gets the indication of negated validation logic.
            </summary>
            <value><see langword="true"/> if the default validation logic should be used; othwerise <see langword="false"/>.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultMessageTemplate">
            <summary>
            Gets the default message template for de validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="tag">The tag that describes the purpose of the validator.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="tag">The tag that describes the purpose of the validator.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> with the result of extracting a value from
            <paramref name="currentTarget"/> usign the configured <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> using
            the configured <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use to extract the value to compare.</param>
            <param name="comparisonOperator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator"/> representing the kind of comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use to extract the value to compare.</param>
            <param name="comparisonOperator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator"/> representing the kind of comparison to perform.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute"/> class.
            </summary>
            <param name="propertyToCompare">The name of the property to use when comparing a value.</param>
            <param name="comparisonOperator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator"/> representing the kind of comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)"/>.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1">
            <summary>
            Validates the value of a property using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a property is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1"/> class.</para>
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="propertyValueValidator">The validator for the value of the property.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            int bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Double,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Double,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            double bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            DateTime bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            long bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            string bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Single,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Single,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            float bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            bound constraints using string representations of the boundaries.</para>
            </summary>
            <param name="boundType">The type of the boundaries.</param>
            <param name="lowerBound">The lower bound represented with a string, or <see langword="null"/>.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound, or <see langword="null"/>.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1">
            <summary>
            Performs validation on <typeparamref name="T"/>
            instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
            <typeparam name="T">The type of the objects to compare. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,`0)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> with the constraints
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit">
            <summary>
            Date time unit.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.None">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Second">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Minute">
            <summary>
            Minutes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Hour">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Day">
            <summary>
            Days.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Month">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Year">
            <summary>
            Years.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1">
            <summary>
            Validates an object by checking if it belongs to a set.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Boolean,`0[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.String,`0[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.List{`0},System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator">
            <summary>
            Validates a <see cref="T:System.DateTime"/> value by checking it belongs to a range relative to the current date.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The implementation for this method will perform type checking and converstion before forwarding the 
            validation request to method <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DoValidate(System.DateTime,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator">
            <summary>
            Validates a string by checking it represents a value for a given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="targetType">The supplied type to used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="targetType">The supplied type to used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="targetType">The supplied type to used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="targetType">The supplied type to used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute"/>.</para>
            </summary>
            <param name="targetType">The supplied type to used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1">
            <summary>
            Validates that a value is of, or inherits, a specific type.
            </summary>
            <remarks>
            A null value is not considered to be of the same type (convention of the 'is' operator).
            By following that convention we make sure that null won't be valid for value-types such as DateTime.
            This validator is mainly used for downcasting.
            </remarks>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="messageTemplate">
            The template to use when logging validation results, 
            or null we the default message template is to be used.
            </param>
            <param name="tag">
            The tag to set when logging validation results, or null.
            </param>
            <param name="negated">
            Indicates if the validation logic represented by the validator should be negated.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The instance of T to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of objectToValidate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of objectToValidate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidator`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidatorAttribute.targetType">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidatorAttribute"/> </para>
            </summary>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="notused">Not used.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator">
            <summary>
            Validates a string by checking it represents a value for a given enum type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute"/> </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute">
            <summary>
            Indicates the target type defines self validation methods.
            </summary>
            <remarks>
            Types without this attribute will not be scanned for self validation methods.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator">
            <summary>
            Performs validation on <see cref="T:System.DateTime"/> instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator">
            <summary>
            Performs validation on collection objects by applying the validation rules specified for a supplied type
            to its members.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> for a target type.</para>
            </summary>
            <param name="targetType">The target type</param>
            <remarks>
            The default ruleset for <paramref name="targetType"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by applying the validation rules for the target type specified for the receiver to the elements
            in <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            If <paramref name="objectToValidate"/> is <see langword="null"/> validation is ignored.
            <para/>
            A referece to a non collection object causes a validation failure and the validation rules
            for the configured target type will not be applied.
            <para/>
            Elements in the collection of a type not compatible with the configured target type causes a validation failure but
            do not affect validation on other elements.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with a target type.</para>
            </summary>
            <param name="targetType">The target type.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with a target type
            and a specific ruleset.</para>
            </summary>
            <param name="targetType">The target type.</param>
            <param name="targetRuleset">The target ruleset.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> described by attribute.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.</returns>
            <remarks>The supplied <paramref name="targetType"/> is the type of the element to which the
            attribute is bound, not the element collection type that has been set in the constructor.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute">
            <summary>
            Marks a method as implementing self validation logic.
            </summary>
            <remarks>
            The following conditions must be met for a method to be considered for self validation:
            <list type="number">
            <item><term>The type for which the validation is being created must have the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute"/>.</term></item>
            <item><term>The method must have the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute"/> with configured for the requested ruleset.</term></item>
            <item><term>The method must be void and take a single parameter of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/>.</term>term&gt;</item>
            </list>
            <para/>
            Non-public methods can be used for self validation, although inherited non-public methods will not be used.
            <para/>
            There is no configuration based way to specify self validation.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute.Ruleset">
            <summary>
            Gets or set the ruleset for which the self validation method must be included.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator">
            <summary>
            Performs validation by invoking a method on the validated object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/> class with the 
            method that is to be invoked when performing validation.</para>
            </summary>
            <param name="methodInfo">The self validation method to invoke.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> does not have the required signature.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by invoking the self validation method configured for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            A validation failure will be logged by the validator when the following conditions are met without
            invoking the self validation method:
            <list type="bullet">
            <item><term><paramref name="objectToValidate"/> is <see langword="null"/>.</term></item>
            <item><term><paramref name="objectToValidate"/> is an instance of a type not compatible with the declaring type for the 
            self validation method.</term></item>
            </list>
            <para/>
            A validation failure will also be logged if the validation method throws an exception.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute">
            <summary>
            Attribute to specify date range validation on a property, method or field.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with an upper bound.
            </summary>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance with an upper bound.
            </summary>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with lower and upper bounds.
            </summary>
            <param name="lowerBound">An ISO8601 formatted string representing the lower bound, like "2006-01-20T00:00:00".</param>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance with lower and upper bounds.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            Initializes a new instance with lower and upper bounds, and bound types.
            </summary>
            <param name="lowerBound">An ISO8601 formatted string representing the lower bound, like "2006-01-20T00:00:00".</param>
            <param name="lowerBoundType">The bound type for the lower bound.</param>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
            <param name="upperBoundType">The bound type for the upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            Initializes a new instance with lower and upper bounds, and bound types.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The bound type for the lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The bound type for the upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1">
            <summary>
            Used to provide a generic API over the unknown validators.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType">
            <summary>
            Indicates how to interpret a range boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Ignore">
            <summary>
            Ignore the range boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive">
            <summary>
            Allow values equal to the boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Exclusive">
            <summary>
            Reject values equal to the boundary.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator">
            <summary>
            Performs validation on <typeparamref name="T"/>
            instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,System.IComparable)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator">
            <summary>
            Performs validation on strings by matching them to a <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> by matching it to the pattern
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.GetPattern">
            <summary>
            Gets the pattern used for building the regular expression.
            </summary>
            <returns>The regular expression pattern.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overriden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator">
            <summary>
            Performs validation on strings by comparing their lengths to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing the length for <paramref name="objectToValidate"/> with the constraints
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with
            a specific ruleset.</para>
            </summary>
            <param name="targetRuleset">The target ruleset.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> described by attribute.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.IgnoreNullsAttribute">
            <summary>
            Indicates that a <see langword="null"/> value is to be allowed by the validator represented by the validation
            attributes for the language element this attribute is bound.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator">
            <summary>
            Logs a failure when validating a <see langword="null"/> reference.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to log failures.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.Boolean,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/> with a message template.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to log failures.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by checking if <paramref name="objectToValidate"/> is <see langword="null"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Validation Application Block.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ConfigurationErrorMessage">
            <summary>
              Looks up a localized string similar to Errors reading configuration for Enterprise Library Validation Application Block.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ContainsCharactersNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not contain the characters in &quot;{3}&quot; with mode &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ContainsCharactersNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must contain the characters in &quot;{3}&quot; with mode &quot;{4}&quot;. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.DomainNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not belong to the domain..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.DomainNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value does not belong to the domain..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumConversionNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumConversionNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumDefinedNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumDefinedNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ErrorCannotPerfomDefaultConversion">
            <summary>
              Looks up a localized string similar to The supplied value could not be converted to the target property type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ErrorValueAccessInvalidType">
            <summary>
              Looks up a localized string similar to The value for &quot;{0}&quot; could not be accessed from an instance of &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ErrorValueAccessNull">
            <summary>
              Looks up a localized string similar to The value for &quot;{0}&quot; could not be accessed from null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionAttemptedValueAccessForInstanceOfInvalidType">
            <summary>
              Looks up a localized string similar to Attempted to retrieve value from instance of wrong type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionBoundTypeNotIComparable">
            <summary>
              Looks up a localized string similar to The supplied bound type is not compatible with IComparable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotConvertBound">
            <summary>
              Looks up a localized string similar to The string representing the bound value could not be converted to the bound type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotIgnoreBothBoundariesInRange">
            <summary>
              Looks up a localized string similar to At most one range bound can be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotSetResourceBasedMessageTemplatesIfTemplateIsSet">
            <summary>
              Looks up a localized string similar to A message template has been set already, resource based message templates are not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotSetResourceMessageTemplatesIfResourceTemplateIsSet">
            <summary>
              Looks up a localized string similar to A message template resource has been set already; template override is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionIntegrationValidatedPropertyNameNotAvailable">
            <summary>
              Looks up a localized string similar to The property name required to retrieve validation information for integration is not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionIntegrationValidatedPropertyNotExists">
            <summary>
              Looks up a localized string similar to The property name required to retrieve validation information for integration is invalid or does not belong to a public property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionIntegrationValidatedPropertyNotReadable">
            <summary>
              Looks up a localized string similar to The property name required to retrieve validation information for integration refers to nonreadable property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionIntegrationValidatedTypeNotAvailable">
            <summary>
              Looks up a localized string similar to The type required to retrieve validation information for integration is not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidDate">
            <summary>
              Looks up a localized string similar to The supplied string is not a valid date representation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidField">
            <summary>
              Looks up a localized string similar to The field &quot;{0}&quot; on type &quot;{1}&quot; is either missing or non public..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidMethod">
            <summary>
              Looks up a localized string similar to The method &quot;{0}&quot; on type &quot;{1}&quot; is either missing, non public, void or has parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidProperty">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; on type &quot;{1}&quot; is either missing, non public or read-only..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidTargetType">
            <summary>
              Looks up a localized string similar to Value to validate is not of the expected type: expected {0} but got {1} instead..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionLowerBoundNull">
            <summary>
              Looks up a localized string similar to The lower bound cannot be null unless it&apos;s type is Ingore..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionMethodHasNoReturnValue">
            <summary>
              Looks up a localized string similar to Method to access value does not have a return value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionMethodHasParameters">
            <summary>
              Looks up a localized string similar to Method to access value has parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionObjectCollectionValidatorDataTargetTypeNotSet">
            <summary>
              Looks up a localized string similar to The target element type has not been set in the configuration..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPartiallyDefinedResourceForMessageTemplate">
            <summary>
              Looks up a localized string similar to Both resource name and resource type must be defined to retrieve the message template..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to The source property to request validators from does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyNotReadable">
            <summary>
              Looks up a localized string similar to The source property to request validators from is not readable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyToCompareNotFound">
            <summary>
              Looks up a localized string similar to No public readable property with name &quot;{0}&quot; could be found for type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyToCompareNull">
            <summary>
              Looks up a localized string similar to The name for the property to compare is null for PropertyComparisonValidator..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionSelfValidationMethodWithInvalidSignature">
            <summary>
              Looks up a localized string similar to The self validation method has an invalid signature. It should be &quot;void [method name](ValidationResults)&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionShouldNotCall">
            <summary>
              Looks up a localized string similar to This method should not have been called..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionTypeNotFound">
            <summary>
              Looks up a localized string similar to The source type to request validators from has not been found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionTypeOfBoundsMustMatch">
            <summary>
              Looks up a localized string similar to Range bounds must have the same type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionUpperBoundLowerThanLowerBound">
            <summary>
              Looks up a localized string similar to Upper bound cannot be lower than lower bound..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionUpperBoundNull">
            <summary>
              Looks up a localized string similar to The upper bound cannot be null unless it&apos;s type is Ingore..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.IgnoreNullsDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value is not null and failed all its validation rules for key &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.MustImplementOperation">
            <summary>
              Looks up a localized string similar to The operation must be implemented by a subclass..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.NonNullNegatedValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.NonNullNonNegatedValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectCollectionValidatorIncompatibleElementInTargetCollection">
            <summary>
              Looks up a localized string similar to The element in the validated collection is not compatible with the expected type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectCollectionValidatorTargetNotCollection">
            <summary>
              Looks up a localized string similar to The supplied object is not a collection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectValidatorInvalidTargetType">
            <summary>
              Looks up a localized string similar to The supplied object is not compatible with the expected type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.OrCompositeValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to All validators failed for key &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RangeValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RangeValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RegexValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not match the regular expression &quot;{3}&quot; with options &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RegexValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must match the regular expression &quot;{3}&quot; with options &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6}) relative to now..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6}) relative to now..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeValidatorNotValidDateTimeUnit">
            <summary>
              Looks up a localized string similar to It&apos;s not possible to specify a None DateTime unit if a BoundaryType different from Ignore is used..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.SelfValidationMethodThrownMessage">
            <summary>
              Looks up a localized string similar to The self validation method thrown an exception while evaluating..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.SelfValidationValidatorMessage">
            <summary>
              Looks up a localized string similar to The reference provided to the self validation method is either null or references an instance of a non-compatible type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.StringLengthValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The length of the value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.StringLengthValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The length of the value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeConversionNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not be convertible to type &quot;{3}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeConversionNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be convertible to type &quot;{3}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The object of type &quot;{3}&quot; is not expected to be of type &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeValidatorNegatedDefaultMessageTemplate1">
            <summary>
              Looks up a localized string similar to The object of type &quot;{3}&quot; is not expected to be of type &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The object of type &quot;{3}&quot; is expected to be of type &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeValidatorNonNegatedDefaultMessageTemplate1">
            <summary>
              Looks up a localized string similar to The object of type &quot;{3}&quot; is expected to be of type &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationErrorsFound">
             <summary>
               Looks up a localized string similar to Validation errors found: 
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorFailureToRetrieveComparand">
            <summary>
              Looks up a localized string similar to Failure to retrieve comparand for key &quot;{0}&quot;: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value should not have succeeded in the comparison with value for key &quot;{4}&quot; using operator &quot;{5}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value failed the comparison with value for key &quot;{4}&quot; using operator &quot;{5}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to Value Validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess">
            <summary>
            Represents the logic to access values from a property.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1">
            <summary>
            Internal implementation for range checking validators.
            </summary>
            <typeparam name="T">The type of value being checked for ranges.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory">
            <summary>
            Factory for creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> objects for types.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.ResetCaches">
            <summary>
            Resets the cached validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromAttributes(System.Type,System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult">
            <summary>
            Represents the result of an atomic validation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.#ctor(System.String,System.Object,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            Initializes this object with a message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.#ctor(System.String,System.Object,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            Initializes this object with a message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Key">
            <summary>
            Gets a name describing the location of the validation result.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Message">
            <summary>
            Gets a message describing the failure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Tag">
            <summary>
            Gets a value characterizing the result.
            </summary>
            <remarks>
            The meaning for a tag is determined by the client code consuming the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/>.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Target">
            <summary>
            Gets the object to which the validation rule was applied.
            </summary>
            <remarks>
            This object might not be the object for which validation was requested initially.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Validator">
            <summary>
            Gets the validator that performed the failing validation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.NestedValidationResults">
            <summary>
            Gets the nested validation results for a composite failed validation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults">
            <summary>
            Represents the result of validating an object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> class with the section name.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.AddResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult)">
            <summary>
            <para>Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/>.</para>
            </summary>
            <param name="validationResult">The validation result to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.AddAllResults(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            <para>Adds all the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> instances from <paramref name="sourceValidationResults"/>.</para>
            </summary>
            <param name="sourceValidationResults">The source for validation results to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])">
            <summary>
            Returns a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> that includes the results from the receiver that
            match the provided tag names.
            </summary>
            <param name="tagFilter">The indication of whether to include or ignore the matching results.</param>
            <param name="tags">The list of tag names to match.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> containing the filtered results.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.IsValid">
            <summary>
            Gets the indication of whether the validation represented by the receiver was successful.
            </summary>
            <remarks>
            An unsuccessful validation will be represented by a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> instance with
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> elements, regardless of these elements' tags.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess">
            <summary>
            Represents the logic to access values from a field.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess">
            <summary>
            Represents the logic to access values from a method.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator">
            <summary>
            Aggregates a set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instances, performing validation by allowing each validator to perform its own.
            </summary>
            <remarks>
            Validation results are logged only if all composed validators log results.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/> class.</para>
            </summary>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/> class.</para>
            </summary>
            <param name="messageTemplate"></param>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver, invoking validation on the composed validators.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The results the generated by the composed validators are logged to <paramref name="validationResults"/>
            only if all the validators generate results.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            This validator does not log messages of its own.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute">
            <summary>
            Indicates that the kind of composition to use when multiple <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/> instances
            are bound to a language element.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/> class.
            </summary>
            <param name="compositionType">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.CompositionType"/> to be used.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation">
            <summary>
            Facade for validation services.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0,System.String)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="ruleset">The ruleset to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateThrow``1(``0)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset, 
            and throws an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException"/> if the validation fails.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException">Validation failed</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateThrow``1(``0,System.String)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset
            and throws an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException"/> if the validation fails.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="ruleset">The ruleset to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationException">Validation failed</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator">
            <summary>
            Performs validation on objects by validating a value extracted from them through an 
            instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> with a specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use when extracting values from the 
            validated objects.</param>
            <param name="valueValidator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> to use when validating the values extracted
            from the validated objects.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="valueAccess"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="valueValidator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates extracting a value from <paramref name="objectToValidate"/> and applying a validator
            to it.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
    </members>
</doc>
